\input texinfo.tex
@c %**start of header
@setfilename vicare-flite.info
@settitle Flite for Vicare
@c %**end of header

@include version.texi
@include macros.texi

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      Flite for Vicare

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    Vicare/@flite{}

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           vicare-flite

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marco.maggi.ipsu@@poste.it}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2013

@c ------------------------------------------------------------

@set FOREIGN_PACKAGE            @flite{}
@set FOREIGN_VERSION            1.4
@set FOREIGN_URL                @url{http:/@//@/www.speech.cs.cmu.edu/@/flite/@/}
@set FOREIGN_SCHEME_LIB         @library{vicare speech-tools flite}
@set GITHUB_URL                 @url{http:/@//@/github.com/@/marcomaggi/@/vicare-flite}
@set SOURCEFORGE_URL            @url{https:/@//@/sourceforge.net/@/projects/@/vicare-flite/@/}
@set DOWNLOAD_URL               @url{https:/@//@/sourceforge.net/@/projects/@/vicare-flite/@/files/@/}
@set DOCUMENTATION_URL          @url{http:/@//@/marcomaggi.github.com/@/docs/@/vicare-flite.html}
@set VICARE_HOMEPAGE_URL        @url{http:/@//@/marcomaggi.github.com/@/vicare.html}


@macro fliteref{NODE, TITLE}
@xref{\NODE\,\TITLE\,\TITLE\,flite}
@end macro

@macro flite{}
@acronym{Flite}
@end macro

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
This document describes version @version{} of @value{PACKAGE}, a
distribution of C and Scheme libraries for Vicare Scheme, an @rnrs{6}
compliant Scheme implementation; it provides bindings for the
@value{FOREIGN_PACKAGE} C language library.

The package is distributed under the terms of the @gnu{} General Public
License (@gpl{}) and can be downloaded from:

@center @value{DOWNLOAD_URL}

@noindent
development takes place at:

@center @value{GITHUB_URL}

@noindent
and as backup at:

@center @value{SOURCEFORGE_URL}

@noindent
@value{FOREIGN_PACKAGE} is available at:

@center @value{FOREIGN_URL}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @gnu{} Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with
Invariant Sections being ``@gnu{} Free Documentation License'' and
``@gnu{} General Public License'', no Front--Cover Texts, and no
Back--Cover Texts.  A copy of the license is included in the section
entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @version{}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* vicare-flite: (vicare-flite). @value{TITLE}.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* plain::                       Plain programming interface.
* nau::                         Nausicaa programming interface.

Appendices

* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

External documents

* flite: (flite).               Flite documentation.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


Vicare Scheme is an @rnrs{6} compliant Scheme language implementation in
the form of a native compiler for x86 architectures, officially
supporting @gnu{}+Linux systems.  @value{PACKAGE} is a distribution of C
language and Scheme language libraries for Vicare Scheme; it provides
bindings for the @value{FOREIGN_PACKAGE} C language library.

The last time the author bothered to update this paragraph, he had
tested @value{FOREIGN_PACKAGE} version @value{FOREIGN_VERSION}; the
@value{FOREIGN_PACKAGE} library is available at:

@center @value{FOREIGN_URL}

The package installs a C language library implementing wrapper C
functions for the C language @value{FOREIGN_PACKAGE} library; on top of
this, the Scheme library @library{vicare speech-tools flite} exports one
binding for each @value{FOREIGN_PACKAGE} public function; additionally
the library @library{vicare speech-tools flite constants} exports one
binding for each constant value defined in the C language header
@file{flite.h}.

The following Scheme libraries are installed:

@table @library
@item vicare speech-tools flite
@cindex Library @library{vicare speech-tools flite}
@cindex @library{vicare speech-tools flite}, library
It exports one binding for some @value{FOREIGN_PACKAGE} public
functions.  Mos of the Scheme function names are directly derived from
the C function names by replacing underscore characters @samp{_} with
dash characters @samp{-}; so @cfunc{flite_init} becomes
@func{flite-init}.

@item vicare speech-tools flite unsafe-capi
@cindex Library @library{vicare speech-tools flite unsafe-capi}
@cindex @library{vicare speech-tools flite unsafe-capi}, library
It exports one syntax binding for some @value{FOREIGN_PACKAGE} public
functions.  Most of the Scheme syntax names are directly derived from
the C function names by replacing underscore characters @samp{_} with
dash characters @samp{-}; so @cfunc{flite_init} becomes
@func{flite-init}.

These syntaxes expand to a direct call to the C language wrapper
functions in the @value{PACKAGE} library; they are not meant to be
called in normal usage of the package.

@item vicare speech-tools flite constants
@cindex Library @library{vicare speech-tools flite constants}
@cindex @library{vicare speech-tools flite constants}, library
It exports one binding for each constant value defined in the C language
header @file{flite.h}.

@item vicare speech-tools flite features
@cindex Library @library{vicare speech-tools flite features}
@cindex @library{vicare speech-tools flite features}, library
It exports one identifier syntax binding for each @code{HAVE_} constant
defined by the @command{configure} script, expanding to @true{} or
@false{}.
@end table

Scheme libraries are installed under the directory:

@center @file{$(libdir)/vicare-scheme}

After installation, under the directory:

@center @file{$(libexecdir)/@value{PACKAGE_NICKNAME}}

@noindent
a script @file{compile-all.sps} can be executed to precompile the
installed libraries; for example:

@example
$ sudo vicare \
   --fasl-directory /var/cache/vicare-scheme \
   --compile-dependencies \
      /usr/local/libexec/vicare-flite/compile-all.sps
@end example

This document contains only a brief description of the functions: refer
to the @value{FOREIGN_PACKAGE}'s documentation for details.

@c page
@node plain
@chapter Plain programming interface


@cindex Library @library{vicare speech-tools flite}
@cindex @library{vicare speech-tools flite}, library


The library @library{vicare speech-tools flite} implements the high
level @api{} for @value{FOREIGN_PACKAGE}.  It is suggested to import
this library with the prefix @samp{flite.} as in:

@example
(import (vicare)
  (prefix (vicare speech-tools flite) flite.))
@end example

@menu
* plain version::               @value{PACKAGE} version informations.
* plain init::                  Library initialisation.
* plain voice::                 Voice selection and handling.
* plain speech::                Text to speech.
* plain not impl::              Still not implemented.
@end menu

@c page
@node plain version
@section @value{PACKAGE} version informations


The installed C library follows version numbering as established by the
@gnu{} Autotools.  For an explanation of interface numbers as managed by
@gnu{} Libtool @xref{Libtool versioning, interface, Libtool's versioning
system, libtool, Shared library support for @gnu{}}.

The following bindings are exported by the library
@value{FOREIGN_SCHEME_LIB}.


@defun vicare-flite-version-interface-current
@defunx vicare-flite-version-interface-revision
@defunx vicare-flite-version-interface-age
Return a fixnum representing a version number.
@end defun


@defun vicare-flite-version
Return a Scheme string representing the version number.
@end defun


The following bindings are exported by @library{vicare speech-tools
flite constants}.


@defvr {Inline Constant} FLITE_PROJECT_NAME
@defvrx {Inline Constant} FLITE_PROJECT_PREFIX
@defvrx {Inline Constant} FLITE_PROJECT_VERSION
@defvrx {Inline Constant} FLITE_PROJECT_DATE
@defvrx {Inline Constant} FLITE_PROJECT_STATE
@defvrx {Inline Constant} FLITE_PROJECT_SHLIB_VERSION
Scheme strings representing @value{FOREIGN_PACKAGE} version
informations.
@end defvr

@c page
@node plain init
@section Library initialisation


The following bindings are exported by the library @library{vicare
speech-tools flite}.


@defun flite-init
Initialise the library.  This function must be called before performing
any other operation with @value{PACKAGE}.
@end defun

@c page
@node plain voice
@section Voice selection and handling


@menu
* plain voice struct::          Voice data structure.
* plain voice ops::             Operating on voice objects.
@end menu

@c page
@node plain voice struct
@subsection Voice data structure


The following bindings are exported by the library @library{vicare
speech-tools flite}.


@deftp {Struct Type} flite-voice
@cindex Argument @var{voice}
@cindex @var{voice} argument
Opaque structure type referencing an instance of the C language type
@code{cst_voice}.

When instances of this type are used as arguments to functions: this
documentation identifies them as @var{voice}.

Instances of this type must be finalised with @func{flite-voice-finalise};
whenever an instance of this type is garbage collected:
@func{flite-voice-finalise} is automatically applied to it and any error
ignored.

In certain contexts, instances of this type own the referenced
@code{cst_voice} value, in other contexts they do not:

@itemize
@item
Finalising a @objtype{flite-voice} instance owning the @code{cst_voice}
value, causes finalisation of the @code{cst_voice} value too.

@item
Finalising a @objtype{flite-voice} instance @strong{not} owning the
@code{cst_voice} value, leaves the @code{cst_voice} untouched.
@end itemize

@noindent
this should happen transparently.
@end deftp


@defun flite-voice? @var{obj}
Return @true{} if @var{obj} is an instance of @objtype{flite-voice};
otherwise return @false{}.
@end defun


@defun flite-voice?/alive @var{obj}
Return @true{} if @var{obj} is an instance of @objtype{flite-voice} and it
has not been finalised; return @false{} otherwise.
@end defun

@c ------------------------------------------------------------

@subsubheading Object properties


@defun flite-voice-putprop @var{voice} @var{key} @var{value}
Add a new property @var{key} to the property list of @var{voice};
@var{key} must be a symbol.  If @var{key} is already set: the old entry
is mutated to reference the new @var{value}.
@end defun


@defun flite-voice-getprop @var{voice} @var{key}
Return the value of the property @var{key} in the property list of
@var{voice}; if @var{key} is not set: return @false{}.  @var{key} must
be a symbol.
@end defun


@defun flite-voice-remprop @var{voice} @var{key}
Remove the property @var{key} from the property list of @var{voice}; if
@var{key} is not set: nothing happens.  @var{key} must be a symbol.
@end defun


@defun flite-voice-property-list @var{voice}
Return a new association list representing the property list of
@var{voice}.  The order of the entries is the same as the property
creation order.
@end defun

@c ------------------------------------------------------------

@subsubheading Custom destructor


@defun flite-voice-custom-destructor @var{voice}
@defunx set-flite-voice-custom-destructor! @var{voice} @var{func}
Retrieve or set a destructor function associated to @var{voice}.

Whenever @var{voice} is finalised, either explicitly with
@func{flite-voice-finalise} or implicitly by the garbage collector,
@var{func} is applied to @var{voice} before the internal state of
@var{voice} is destroyed.
@end defun

@c ------------------------------------------------------------

@subsubheading Other operations


@defun flite-voice-hash @var{voice}
Return an exact integer to be used as hashtable key for @var{voice}.
Hashtables having a @objtype{flite-voice} as key can be instantiated as
follows:

@example
(make-hashtable flite-voice-hash eq?)
@end example
@end defun

@c ------------------------------------------------------------

@subsubheading Arguments validation


The following bindings are meant to be used with the facilities of the
library @library{vicare arguments validation}.


@deffn {Validation Clause} flite-voice @var{obj}
@deffnx {Validation Clause} false-or-flite-voice @var{obj}
Succeed if @var{obj} satisfies the predicate @func{flite-voice?}; the
second clause also accepts @false{}.
@end deffn


@deffn {Validation Clause} flite-voice/alive @var{obj}
@deffnx {Validation Clause} false-or-flite-voice/alive @var{obj}
Succeed if @var{obj} satisfies the predicate @func{flite-voice?/alive};
the second clause also accepts @false{}.
@end deffn

@c page
@node plain voice ops
@subsection Operating on voice objects


The following bindings are exported by the library @library{vicare
speech-tools flite}.


@defun flite-voice-select
@defunx flite-voice-select @var{voice-name}
Build and return a new @objtype{flite-voice} object making use of the
specified voice; if an error occurs raise an exception.

@var{voice-name} must be a generalised C string holding the name of a
voice, @cbuffersref{}.  It defaults to the string @code{"rms"}.  If the
selected voice name does not match an available one: a default voice is
automatically selected.
@end defun


@defun flite-voice-finalise @var{voice}
Finalise @var{voice}; return unspecified values.  It is fine to apply
this function multiple times to the same @var{voice} value: the first
time the underlying data is finalised, the subsequent times nothing
happens.

If this function is applied to an @var{voice} value not owning the
underlying @code{cst_voice} value: @var{voice} is finalised, but the
@code{cst_voice} value is left alone.
@end defun


@defun flite-voice-name @var{voice}
Return a Scheme string representing the name of the given @var{voice}.
@end defun


@defun flite-available-voice-names
Return a list of Scheme strings representing the names of the available
voices.

@example
(import (vicare speech-tools flite))

(flite-available-voice-names)
@result{} ("slt" "rms" "kal16" "kal" "awb")
@end example
@end defun

@c page
@node plain speech
@section Text to speech


The following bindings are exported by the library @library{vicare
speech-tools flite}.


@defun flite-file-to-speech @var{filename} @var{voice} @var{outtype}
Read text from the selected file and produce some output using the
selected voice.  Return a flonum representing the number of seconds of
generated output.

@var{filename} must be a generalised C string holding the name of an
existent and readable file, @cbuffersref{}.

@var{outtype} must be a must be a generalised C string (@cbuffersref{})
holding one of: @samp{play}, to play the generated audio; @samp{none},
to discard the generated audio.
@end defun


@defun flite-text-to-speech @var{text} @var{voice} @var{outtype}
Process the given text and produce some output using the selected voice.
Return a flonum representing the number of seconds of generated output.

@var{text} must be a generalised C string holding the text to process,
@cbuffersref{}.

@var{outtype} must be a must be a generalised C string (@cbuffersref{})
holding one of: @samp{play}, to play the generated audio; @samp{none},
to discard the generated audio; a the name of a file in which to save
the generated output.

@example
(import (vicare)
  (prefix (vicare speech-tools flite) flite.))

(flite.flite-init)

(define voice
  (flite.flite-voice-select))

(flite.flite-text-to-speech "text to speech play" voice "play")
@end example
@end defun

@c page
@node plain not impl
@section Still not implemented


The following bindings are exported by the library @library{vicare
speech-tools flite}.


@defun flite-voice-add-lex-addenda
@end defun


@defun flite-text-to-wave
@end defun


@defun flite-synth-text
@end defun


@defun flite-synth-phones
@end defun

@c page
@node nau
@chapter Nausicaa programming interface


@cindex Library @library{nausicaa speech-tools flite}
@cindex @library{nausicaa speech-tools flite}, library


The library @library{nausicaa speech-tools flite} implements an
interface to @library{vicare speech-tools flite} on top of the
@library{nausicaa} language.

@menu
* nau voice::                   Voice selection and handling.
@end menu

@c page
@node nau voice
@section Voice selection and handling


@menu
* nau voice objects::           Voice objects.
* nau voice methods::           Voice methods.
@end menu

@c page
@node nau voice objects
@subsection Voice objects


The following bindings are exported by the library @library{nausicaa
speech-tools flite}.


@deftp {Label Type} @aclass{flite-voice}
@cindex Argument @var{voice}
@cindex @var{voice} argument
Label type representing objects of type @objtype{flite-voice}.  When
instances of this type are used as arguments to functions: this
documentation identifies them as @var{voice}.

Instances of this type must be finalised with @func{finalise}; whenever
an instance of this type is garbage collected: @func{finalise} is
automatically applied to it and any error ignored.
@end deftp


@defop {Default constructor} @aclass{flite-voice} constructor @var{voice-name}
Build and return a new @class{flite-voice} object making use of the
specified voice; if an error occurs raise an exception.

@var{voice-name} must be a generalised C string holding the name of a
voice, @cbuffersref{}.  It defaults to the string @code{"rms"}.  If the
selected voice name does not match an available one: a default voice is
automatically selected.
@end defop


@deffn Syntax @aclass{flite-voice} (@meta{voice-name})
Build and return a new @class{flite-voice} using the default
constructor.
@end deffn


@defmethod @aclass{flite-voice} finalise
Finalise the instance; return unspecified values.  It is fine to call
this method multiple times for the same instance.
@end defmethod


@deftypemethod @aclass{flite-voice} @aclass{boolean} alive?
Return @true{} if @var{obj} is an instance of @class{flite-voice} and it
has not been finalised; return @false{} otherwise.
@end deftypemethod


@c ------------------------------------------------------------

@subsubheading Object properties


@defmethod @aclass{flite-voice} putprop @var{key} @var{value}
Add a new property @var{key} to the property list of the instance;
@var{key} must be a symbol.  If @var{key} is already set: the old entry
is mutated to reference the new @var{value}.
@end defmethod


@defmethod @aclass{flite-voice} getprop @var{key}
Return the value of the property @var{key} in the property list of the
instance; if @var{key} is not set: return @false{}.  @var{key} must be a
symbol.
@end defmethod


@defmethod @aclass{flite-voice} remprop @var{key}
Remove the property @var{key} from the property list of the instance; if
@var{key} is not set: nothing happens.  @var{key} must be a symbol.
@end defmethod


@defmethod @aclass{flite-voice} property-list
Return a new association list representing the property list of the
instance.  The order of the entries is the same as the property creation
order.
@end defmethod

@c ------------------------------------------------------------

@subsubheading Virtual fields


@deftypecv @aclass{flite-voice} @aclass{procedure} destructor
Retrieve or set a destructor function associated to the instance.

Whenever the instance is finalised, either explicitly with
@func{finalise} or implicitly by the garbage collector, the custom
destructor is applied to the instance before the internal state of the
instance is destroyed.
@end deftypecv

@c ------------------------------------------------------------

@subsubheading Other operations


@defmethod @aclass{flite-voice} hash
Return an exact integer to be used as hashtable key for the instance.
Hashtables having a @class{flite-voice} as key can be instantiated as
follows:

@example
(make-hashtable (lambda ((V <flite-voice>))
                  (V hash))
                eq?)
@end example
@end defmethod

@c ------------------------------------------------------------

@subsubheading Arguments validation


The following bindings are meant to be used with the facilities of the
library @library{vicare arguments validation}.


@deffn {Validation Clause} flite-voice @var{obj}
@deffnx {Validation Clause} false-or-flite-voice @var{obj}
Succeed if @var{obj} is an instance of @class{flite-voice}; the second
clause also accepts @false{}.
@end deffn


@deffn {Validation Clause} flite-voice/alive @var{obj}
@deffnx {Validation Clause} false-or-flite-voice/alive @var{obj}
Succeed if @var{obj} is an instance of @class{flite-voice} and the
method @func{alive?} would return @true{} if applied to it; the second
clause also accepts @false{}.
@end deffn

@c page
@node nau voice methods
@subsection Voice methods


The following bindings are exported by the library @library{nausicaa
speech-tools flite}.


@defmethod @aclass{flite-voice} name
Return a Scheme string representing the name of the given instance.
@end defmethod


@defmethod @aclass{flite-voice} play @var{text}
Process the given text and produce some output using the instance voice.
Return a flonum representing the number of seconds of generated output.

@var{text} must be a generalised C string holding the text to process,
@cbuffersref{}.

@example
(import (nausicaa)
  (prefix (nausicaa speech-tools flite) flite.))

(flite.flite-init)

(flite.<flite-voice> voice (<> ("slt")))
(voice play "text to speech play")
@end example
@end defmethod

@c page
@c ------------------------------------------------------------
@c Appendices.
@c ------------------------------------------------------------

@include gpl-3.0.texi
@include fdl-1.3.texi

@c page
@node references
@appendix Bibliography and references


The documentation of @value{PACKAGE} is available online:

@center @value{DOCUMENTATION_URL}

@noindent
the latest version of this package can be downloaded from:

@center @value{DOWNLOAD_URL}

@noindent
development takes place at:

@center @value{GITHUB_URL}

@noindent
and as backup at:

@center @value{SOURCEFORGE_URL}

@noindent
the home page of the Vicare project is at:

@center @value{VICARE_HOMEPAGE_URL}

@noindent
@value{FOREIGN_PACKAGE} can be found here:

@center @value{FOREIGN_URL}

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file

